# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gK55CMKzIs6MrHvn1qYJtPLi1Y-wlEIf
"""

# app.py

import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from sklearn.linear_model import LinearRegression
from datetime import datetime, timedelta

# --- Page Configuration ---
st.set_page_config(
    page_title="Stock Analysis Dashboard",
    page_icon="üìà",
    layout="wide"
)

# --- App Title and Description ---
st.title("üìà Interactive Stock Analysis Dashboard")
st.markdown("Analyze historical stock prices, moving averages, and get a simple forecast.")

# --- Sidebar for User Inputs ---
st.sidebar.header("User Input")

# Get a list of S&P 500 tickers (example tickers)
# In a real app, you might fetch this dynamically or have a more robust list.
# For simplicity, we use a predefined list.
default_tickers = ["AAPL", "GOOGL", "MSFT", "AMZN", "TSLA", "META", "NVDA"]
ticker = st.sidebar.text_input("Enter Stock Ticker", "AAPL").upper()

# Date range selection
start_date = st.sidebar.date_input("Start Date", datetime.now() - timedelta(days=365*2))
end_date = st.sidebar.date_input("End Date", datetime.now())

# Number of days to forecast
forecast_days = st.sidebar.number_input("Days to Forecast", min_value=1, max_value=365, value=30)

# --- Data Fetching and Caching ---
# Using st.cache_data to avoid re-fetching data on every interaction
@st.cache_data
def load_data(ticker_symbol, start, end):
    """
    Fetches stock data from Yahoo Finance for a given ticker and date range.
    """
    try:
        data = yf.download(ticker_symbol, start=start, end=end)
        if data.empty:
            return None
        return data
    except Exception as e:
        st.error(f"Error fetching data for {ticker_symbol}: {e}")
        return None

# Load the data based on user input
data = load_data(ticker, start_date, end_date)

if data is not None and not data.empty:

    # --- Display Stock Information and Data ---
    st.header(f"üìä Analysis for {ticker}")
    st.markdown(f"Displaying data from **{start_date}** to **{end_date}**.")

    # Display the latest data in an expandable section
    with st.expander("View Raw Data Table"):
        st.dataframe(data.tail(10)) # Show the last 10 rows

    # --- Moving Averages Calculation ---
    data['SMA_50'] = data['Close'].rolling(window=50).mean()
    data['SMA_200'] = data['Close'].rolling(window=200).mean()

    # --- Plotting Historical Prices and Moving Averages ---
    st.subheader("Price History & Moving Averages")

    fig_price = go.Figure()

    # Add Closing Price trace
    fig_price.add_trace(go.Scatter(
        x=data.index,
        y=data['Close'],
        mode='lines',
        name='Closing Price',
        line=dict(color='royalblue', width=2)
    ))

    # Add 50-Day SMA trace
    fig_price.add_trace(go.Scatter(
        x=data.index,
        y=data['SMA_50'],
        mode='lines',
        name='50-Day SMA',
        line=dict(color='orange', width=1.5, dash='dash')
    ))

    # Add 200-Day SMA trace
    fig_price.add_trace(go.Scatter(
        x=data.index,
        y=data['SMA_200'],
        mode='lines',
        name='200-Day SMA',
        line=dict(color='red', width=1.5, dash='dash')
    ))

    # Update layout for a clean look
    fig_price.update_layout(
        title=f'{ticker} Closing Price',
        xaxis_title='Date',
        yaxis_title='Price (USD)',
        legend_title='Legend',
        template='plotly_white'
    )
    st.plotly_chart(fig_price, use_container_width=True)

    # --- Simple Linear Regression Forecasting ---
    st.subheader("üîÆ Simple Price Forecast")

    # Prepare data for regression
    # We use a simple time-based feature (day number)
    df_reg = data.reset_index()
    df_reg['DayNum'] = (df_reg['Date'] - df_reg['Date'].min()).dt.days

    # X: Feature (Day Number), y: Target (Closing Price)
    X = df_reg[['DayNum']]
    y = df_reg['Close']

    # Create and train the model
    model = LinearRegression()
    model.fit(X, y)

    # Generate future dates for forecasting
    last_date = df_reg['Date'].max()
    future_dates = [last_date + timedelta(days=i) for i in range(1, forecast_days + 1)]

    # Generate future day numbers for prediction
    last_day_num = df_reg['DayNum'].max()
    future_day_nums = np.array([last_day_num + i for i in range(1, forecast_days + 1)]).reshape(-1, 1)

    # Predict future prices
    forecast = model.predict(future_day_nums)

    # Create a DataFrame for the forecast
    forecast_df = pd.DataFrame({'Date': future_dates, 'Forecast': forecast})

    # --- Plotting the Forecast ---
    fig_forecast = go.Figure()

    # Plot historical data
    fig_forecast.add_trace(go.Scatter(
        x=df_reg['Date'],
        y=df_reg['Close'],
        mode='lines',
        name='Historical Close'
    ))

    # Plot the regression line on historical data
    fig_forecast.add_trace(go.Scatter(
        x=df_reg['Date'],
        y=model.predict(X),
        mode='lines',
        name='Regression Line',
        line=dict(color='rgba(255, 0, 0, 0.5)', dash='dot')
    ))

    # Plot the forecasted data
    fig_forecast.add_trace(go.Scatter(
        x=forecast_df['Date'],
        y=forecast_df['Forecast'],
        mode='lines',
        name='Forecast',
        line=dict(color='green', width=2)
    ))

    # Update layout
    fig_forecast.update_layout(
        title=f'{ticker} Price Forecast (Linear Regression)',
        xaxis_title='Date',
        yaxis_title='Price (USD)',
        legend_title='Legend',
        template='plotly_white'
    )
    st.plotly_chart(fig_forecast, use_container_width=True)

    # Display forecast data in a table
    with st.expander(f"View Forecast Data for the Next {forecast_days} Days"):
        st.dataframe(forecast_df)

else:
    st.warning("Please enter a valid stock ticker and select a date range.")

# --- Footer ---
st.markdown("---")
st.markdown("Developed with ‚ù§Ô∏è using Streamlit and yfinance. For educational purposes only.")